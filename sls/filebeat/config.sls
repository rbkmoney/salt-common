#!pyobjects
## -*- mode: python -*-
from salt.utils import dictupdate
import yaml
import json

include("ssl.dirs")
from salt://ssl/pki-vault.sls import cert_key_expiration_state

fqdn = grains("fqdn")
fqdn_ipv6 = grains("fqdn_ipv6")
conf_path = "/etc/filebeat/"

File.directory(conf_path, create=True, mode=755, user="root", group="root")

tls = pillar("filebeat:tls", {})
p_vault = tls.get("vault", {})
vault_enable_p = p_vault.get("enable", False)

# defaults
config = {
  "name": str(fqdn),
  "path": {
    "home": "/var/lib/filebeat",
    "conf": "/etc/filebeat",
    "logs": "/var/log",
  },
  "logging": {
    "level": "info",
    "selectors": ["*"],
    "to_files": True,
    "to_syslog": False,
    "files": {
      "path": "/var/log/filebeat",
      "name": "filebeat.log",
      "keepfiles": 7,
    }},
  "filebeat": {},
  "output": {},
}

config["filebeat"]["inputs"] = pillar("filebeat:inputs")
config["output"] = pillar("filebeat:output")
elastic_template = pillar("filebeat:template", False)

conf_require = [File(conf_path)]

if elastic_template:
  File.managed(
    conf_path + "filebeat.template.json",
    mode=640, user="root", group="root",
    contents=json.dumps(elastic_template),
    require=[File(conf_path)])
  config["setup"] = {"template.enabled": True}
else:
  File.absent(conf_path + "filebeat.template.json")
  config["setup"] = {"template.enabled": False}

for out in config["output"].keys():
  if out in tls.keys():
    out_ssl = {}
    config["output"][out]["ssl"] = out_ssl
    out_ssl["enabled"] = tls[out].get("enabled", True)
    if tls[out].get("vault", False):
      pki_path = "/etc/pki/filebeat-"+ out +"/"

      cert_key_expiration_state(
        "filebeat-"+ out, "filebeat:tls:"+ out +":vault",
        "pki/elasticsearch", "filebeat",
        "filebeat:user", "root", "filebeat:group", "root")

      out_ssl["certificate"] = pki_path + "fullchain.pem"
      out_ssl["key"] = pki_path + "privkey.pem"
      out_ssl["certificate_authorities"] = [pki_path + "ca_chain.pem"]
      conf_require.append(File(pki_path + "fullchain.pem"))
      conf_require.append(File(pki_path + "privkey.pem"))
      conf_require.append(File(pki_path + "ca_chain.pem"))
    else:
      for pemtype in ("cert", "key", "ca"):
        contents = tls[out].get(pemtype, tls.get(pemtype, ""))
        path = conf_path + out + "-" + pemtype + ".pem"
        if contents:
          if pemtype == "cert": out_ssl["certificate"] = path
          if pemtype == "key": out_ssl["key"] = path
          if pemtype == "ca": out_ssl["certificate_authorities"] = [path]
        File.managed(
          path, mode=600, user="root", group="root",
          contents=contents, require=[File(conf_path)])
        conf_require.append(File(path))

dictupdate.update(config, pillar("filebeat:config", {}))

File.managed(
  conf_path + "filebeat.yml",
  mode=640, user="root", group="root",
  check_cmd="filebeat test config -c",
  contents="# This file is generated by Salt\n" + yaml.dump(config),
  require=conf_require)
